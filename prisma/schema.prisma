generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  admin
  user
  mod
  seller
}

model Users {
  id              String             @id @default(uuid())
  name            String
  lastname        String?
  email           String
  password        String
  role            Roles              @default(user)
  balance         Float?             @default(0.00)
  freezebalance   Float?             @default(0.00)
  token           String?
  emailToken      String?
  updatableEmail  String?
  passToken       String?
  cart            CartUserProducts[]
  createdCombo    Combo[]
  createdProducts Products[]
  ModRecharges    Recharges[]        @relation("mod")
  userRecharges   Recharges[]        @relation("user")

  refoundBalance   UserRefoundBalance[] @relation("user")
  refoundsAsMod    UserRefoundBalance[] @relation("mod")
  invoices         Invoices[]
  tickets          Tickets[]
  splitpay_session SplitPaySession?
  items            Items[]
}

model Categories {
  id        String     @id @default(uuid())
  name      String
  productos Products[]
  items     Items[]
}

//New Table For Products
model Items {
  id          String            @id @default(uuid())
  name        String
  price       Float
  stock       Int               @default(0)
  item_type   TicketProductType
  description String?
  id_seller   String
  id_category String?

  createdAt DateTime @default(now())

  category    Categories?  @relation(fields: [id_category], references: [id])
  seller      Users        @relation(fields: [id_seller], references: [id], onDelete: Cascade, onUpdate: Cascade)
  images      ItemImages[]
  items_combo ItemsCombo[] @relation("Combo")
  combos      ItemsCombo[] @relation("Product")
}

model ItemsCombo {
  id              String @id @default(uuid())
  id_item_combo   String
  id_item_product String
  quantity        Int    @default(0)

  combo   Items @relation("Combo", fields: [id_item_combo], references: [id], onUpdate: Cascade)
  product Items @relation("Product", fields: [id_item_product], references: [id], onUpdate: Cascade)
}

model ItemImages {
  id        String @id @default(uuid())
  url       String
  public_id String @default("") //Cloudinary public id and localapi
  id_item   String
  item      Items  @relation(fields: [id_item], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Products {
  id          String             @id @default(uuid())
  name        String
  price       Float
  stock       Int                @default(0)
  description String
  categorieID String
  seller_id   String
  createadAt  DateTime           @default(now())
  usersCarts  CartUserProducts[]
  combo       ComboProducts[]
  images      ProductImages[]
  categorie   Categories         @relation(fields: [categorieID], references: [id], onDelete: Cascade)
  seller      Users              @relation(fields: [seller_id], references: [id])
}

model ProductImages {
  id         String   @id @default(uuid())
  id_product String
  url        String
  public_id  String   @default("")
  product    Products @relation(fields: [id_product], references: [id], onDelete: Cascade)
}

model Combo {
  id          String   @id @default(uuid())
  name        String
  description String
  stock       Int      @default(0)
  price       Float
  createadAt  DateTime @default(now())

  id_seller        String
  seller           Users              @relation(fields: [id_seller], references: [id], onDelete: Cascade)
  products         ComboProducts[]
  CartUserProducts CartUserProducts[]
}

model ComboProducts {
  id         String   @id @default(uuid())
  id_product String
  id_combo   String
  quantity   Int
  combo      Combo    @relation(fields: [id_combo], references: [id], onDelete: Cascade)
  product    Products @relation(fields: [id_product], references: [id], onDelete: Cascade)
}

enum RechargeType {
  default
  splitpay
}

model Recharges {
  id        String       @id @default(uuid())
  userID    String
  modID     String?
  balance   Float
  type      RechargeType @default(default)
  createdAt DateTime     @default(now())
  mod       Users?       @relation("mod", fields: [modID], references: [id], onDelete: Cascade)
  user      Users        @relation("user", fields: [userID], references: [id], onDelete: Cascade)
}

model CartUserProducts {
  id          String  @id @default(uuid())
  id_user     String
  id_product  String?
  id_combo    String?
  //It can be disabled on cart
  enableToBuy Boolean @default(true)

  ticket_qr String @default(uuid()) //TODO May Delete

  //If this is true it means that some one bought it 
  ticket_enabled Boolean @default(false) //TODO May Delete

  //If it is true has been claimed
  ticket_redeem Boolean @default(false) //TODO May Delete

  request_refund Boolean?  @default(false)
  refunded       Boolean   @default(false)
  refundedAt     DateTime?
  refoundPrice   Float?

  claimedAt DateTime? //TODO May delete

  purchaseAt DateTime?
  createdAt  DateTime  @default(now())
  quantity   Int
  product    Products? @relation(fields: [id_product], references: [id], onDelete: Cascade)
  combo      Combo?    @relation(fields: [id_combo], references: [id], onDelete: Cascade)
  user       Users     @relation(fields: [id_user], references: [id], onDelete: Cascade)
}

enum TicketProductType {
  PRODUCT
  COMBO
}

enum TicketStatus {
  TICKET_ENABLED //user already buy this ticket
  REDEEMED //user already redeem this ticket
  REFOUND_REQUST //user want to make a refound of this ticket
  REFOUNDED //user did a refound of this ticket
}

model Tickets {
  id             String            @id @default(uuid())
  id_user        String
  id_product     String
  product_name   String
  product_type   TicketProductType
  ticket_status  TicketStatus      @default(TICKET_ENABLED)
  quantity       Int
  price          Float
  ticket_redeem  Boolean           @default(false)
  request_refund Boolean           @default(false)
  refunded       Boolean           @default(false)
  refundedAt     DateTime?
  claimedAt      DateTime?

  user        Users         @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ticketsItem TicketsItem[]
}

//In case there is a ticketCombo
model TicketsItem {
  id                String @id @default(uuid())
  product_name      String
  producto_quantity String
  id_ticket         String

  ticket Tickets @relation(fields: [id_ticket], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Invoices {
  id         String   @id @default(uuid())
  id_user    String
  totalPrice Float
  createdAt  DateTime @default(now())

  user             Users              @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoicesProducts InvoicesProducts[]
}

//Maybe not a relationship with products cuz, dont want to update dynamic data, want to store static
model InvoicesProducts {
  id            String @id @default(uuid())
  id_invoice    String
  product_name  String
  product_price Float
  quantity      Int

  invoice Invoices @relation(fields: [id_invoice], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum UserRefoundStatus {
  pending
  accepted
  denied
  canceled
}

model UserRefoundBalance {
  id             String            @id @default(uuid())
  status         UserRefoundStatus @default(pending)
  refoundBalance Float
  reason         String
  id_user        String

  //Who give refound/money
  id_mod String?

  createdAt DateTime  @default(now())
  checkedAt DateTime?

  mod  Users? @relation("mod", fields: [id_mod], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user Users  @relation("user", fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum SplitPayStatus {
  not_configured
  active
}

model SplitPay {
  id              String           @id @default(uuid())
  name            String
  createdAt       DateTime         @default(now())
  key             String
  accesCode       String?
  status          SplitPayStatus   @default(not_configured)
  splitPaySession SplitPaySession?
}

model SplitPaySession {
  id          String @id @default(uuid())
  balance     Float
  id_user     String @unique
  id_splitpay String @unique

  splitpay SplitPay @relation(fields: [id_splitpay], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user     Users    @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
